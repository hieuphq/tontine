// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Investor is an object representing the database table.
type Investor struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *investorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L investorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvestorColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// Generated where

var InvestorWhere = struct {
	ID        whereHelperint64
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"investors\".\"id\""},
	Name:      whereHelperstring{field: "\"investors\".\"name\""},
	CreatedAt: whereHelpertime_Time{field: "\"investors\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"investors\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"investors\".\"deleted_at\""},
}

// InvestorRels is where relationship names are stored.
var InvestorRels = struct {
	ActivityLogs    string
	GroupsInvestors string
}{
	ActivityLogs:    "ActivityLogs",
	GroupsInvestors: "GroupsInvestors",
}

// investorR is where relationships are stored.
type investorR struct {
	ActivityLogs    ActivityLogSlice
	GroupsInvestors GroupsInvestorSlice
}

// NewStruct creates a new relationship struct
func (*investorR) NewStruct() *investorR {
	return &investorR{}
}

// investorL is where Load methods for each relationship are stored.
type investorL struct{}

var (
	investorAllColumns            = []string{"id", "name", "created_at", "updated_at", "deleted_at"}
	investorColumnsWithoutDefault = []string{"name", "deleted_at"}
	investorColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	investorPrimaryKeyColumns     = []string{"id"}
)

type (
	// InvestorSlice is an alias for a slice of pointers to Investor.
	// This should generally be used opposed to []Investor.
	InvestorSlice []*Investor
	// InvestorHook is the signature for custom Investor hook methods
	InvestorHook func(context.Context, boil.ContextExecutor, *Investor) error

	investorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	investorType                 = reflect.TypeOf(&Investor{})
	investorMapping              = queries.MakeStructMapping(investorType)
	investorPrimaryKeyMapping, _ = queries.BindMapping(investorType, investorMapping, investorPrimaryKeyColumns)
	investorInsertCacheMut       sync.RWMutex
	investorInsertCache          = make(map[string]insertCache)
	investorUpdateCacheMut       sync.RWMutex
	investorUpdateCache          = make(map[string]updateCache)
	investorUpsertCacheMut       sync.RWMutex
	investorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var investorBeforeInsertHooks []InvestorHook
var investorBeforeUpdateHooks []InvestorHook
var investorBeforeDeleteHooks []InvestorHook
var investorBeforeUpsertHooks []InvestorHook

var investorAfterInsertHooks []InvestorHook
var investorAfterSelectHooks []InvestorHook
var investorAfterUpdateHooks []InvestorHook
var investorAfterDeleteHooks []InvestorHook
var investorAfterUpsertHooks []InvestorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Investor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Investor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Investor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Investor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Investor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Investor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Investor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Investor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Investor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range investorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvestorHook registers your hook function for all future operations.
func AddInvestorHook(hookPoint boil.HookPoint, investorHook InvestorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		investorBeforeInsertHooks = append(investorBeforeInsertHooks, investorHook)
	case boil.BeforeUpdateHook:
		investorBeforeUpdateHooks = append(investorBeforeUpdateHooks, investorHook)
	case boil.BeforeDeleteHook:
		investorBeforeDeleteHooks = append(investorBeforeDeleteHooks, investorHook)
	case boil.BeforeUpsertHook:
		investorBeforeUpsertHooks = append(investorBeforeUpsertHooks, investorHook)
	case boil.AfterInsertHook:
		investorAfterInsertHooks = append(investorAfterInsertHooks, investorHook)
	case boil.AfterSelectHook:
		investorAfterSelectHooks = append(investorAfterSelectHooks, investorHook)
	case boil.AfterUpdateHook:
		investorAfterUpdateHooks = append(investorAfterUpdateHooks, investorHook)
	case boil.AfterDeleteHook:
		investorAfterDeleteHooks = append(investorAfterDeleteHooks, investorHook)
	case boil.AfterUpsertHook:
		investorAfterUpsertHooks = append(investorAfterUpsertHooks, investorHook)
	}
}

// One returns a single investor record from the query.
func (q investorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Investor, error) {
	o := &Investor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for investors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Investor records from the query.
func (q investorQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvestorSlice, error) {
	var o []*Investor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to Investor slice")
	}

	if len(investorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Investor records in the query.
func (q investorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count investors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q investorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if investors exists")
	}

	return count > 0, nil
}

// ActivityLogs retrieves all the activity_log's ActivityLogs with an executor.
func (o *Investor) ActivityLogs(mods ...qm.QueryMod) activityLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activity_logs\".\"investor_id\"=?", o.ID),
	)

	query := ActivityLogs(queryMods...)
	queries.SetFrom(query.Query, "\"activity_logs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"activity_logs\".*"})
	}

	return query
}

// GroupsInvestors retrieves all the groups_investor's GroupsInvestors with an executor.
func (o *Investor) GroupsInvestors(mods ...qm.QueryMod) groupsInvestorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"groups_investors\".\"investor_id\"=?", o.ID),
	)

	query := GroupsInvestors(queryMods...)
	queries.SetFrom(query.Query, "\"groups_investors\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"groups_investors\".*"})
	}

	return query
}

// LoadActivityLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (investorL) LoadActivityLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvestor interface{}, mods queries.Applicator) error {
	var slice []*Investor
	var object *Investor

	if singular {
		object = maybeInvestor.(*Investor)
	} else {
		slice = *maybeInvestor.(*[]*Investor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &investorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &investorR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`activity_logs`), qm.WhereIn(`activity_logs.investor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activity_logs")
	}

	var resultSlice []*ActivityLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activity_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activity_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activity_logs")
	}

	if len(activityLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActivityLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activityLogR{}
			}
			foreign.R.Investor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InvestorID {
				local.R.ActivityLogs = append(local.R.ActivityLogs, foreign)
				if foreign.R == nil {
					foreign.R = &activityLogR{}
				}
				foreign.R.Investor = local
				break
			}
		}
	}

	return nil
}

// LoadGroupsInvestors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (investorL) LoadGroupsInvestors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvestor interface{}, mods queries.Applicator) error {
	var slice []*Investor
	var object *Investor

	if singular {
		object = maybeInvestor.(*Investor)
	} else {
		slice = *maybeInvestor.(*[]*Investor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &investorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &investorR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`groups_investors`), qm.WhereIn(`groups_investors.investor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load groups_investors")
	}

	var resultSlice []*GroupsInvestor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice groups_investors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on groups_investors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups_investors")
	}

	if len(groupsInvestorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroupsInvestors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupsInvestorR{}
			}
			foreign.R.Investor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InvestorID {
				local.R.GroupsInvestors = append(local.R.GroupsInvestors, foreign)
				if foreign.R == nil {
					foreign.R = &groupsInvestorR{}
				}
				foreign.R.Investor = local
				break
			}
		}
	}

	return nil
}

// AddActivityLogs adds the given related objects to the existing relationships
// of the investor, optionally inserting them as new records.
// Appends related to o.R.ActivityLogs.
// Sets related.R.Investor appropriately.
func (o *Investor) AddActivityLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActivityLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvestorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activity_logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"investor_id"}),
				strmangle.WhereClause("\"", "\"", 0, activityLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvestorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &investorR{
			ActivityLogs: related,
		}
	} else {
		o.R.ActivityLogs = append(o.R.ActivityLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activityLogR{
				Investor: o,
			}
		} else {
			rel.R.Investor = o
		}
	}
	return nil
}

// AddGroupsInvestors adds the given related objects to the existing relationships
// of the investor, optionally inserting them as new records.
// Appends related to o.R.GroupsInvestors.
// Sets related.R.Investor appropriately.
func (o *Investor) AddGroupsInvestors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GroupsInvestor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvestorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"groups_investors\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"investor_id"}),
				strmangle.WhereClause("\"", "\"", 0, groupsInvestorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvestorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &investorR{
			GroupsInvestors: related,
		}
	} else {
		o.R.GroupsInvestors = append(o.R.GroupsInvestors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupsInvestorR{
				Investor: o,
			}
		} else {
			rel.R.Investor = o
		}
	}
	return nil
}

// Investors retrieves all the records using an executor.
func Investors(mods ...qm.QueryMod) investorQuery {
	mods = append(mods, qm.From("\"investors\""))
	return investorQuery{NewQuery(mods...)}
}

// FindInvestor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvestor(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Investor, error) {
	investorObj := &Investor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"investors\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, investorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from investors")
	}

	return investorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Investor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no investors provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(investorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	investorInsertCacheMut.RLock()
	cache, cached := investorInsertCache[key]
	investorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			investorAllColumns,
			investorColumnsWithDefault,
			investorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(investorType, investorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(investorType, investorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"investors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"investors\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"investors\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, investorPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into investors")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == investorMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for investors")
	}

CacheNoHooks:
	if !cached {
		investorInsertCacheMut.Lock()
		investorInsertCache[key] = cache
		investorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Investor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Investor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	investorUpdateCacheMut.RLock()
	cache, cached := investorUpdateCache[key]
	investorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			investorAllColumns,
			investorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update investors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"investors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, investorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(investorType, investorMapping, append(wl, investorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update investors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for investors")
	}

	if !cached {
		investorUpdateCacheMut.Lock()
		investorUpdateCache[key] = cache
		investorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q investorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for investors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for investors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvestorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), investorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"investors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, investorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in investor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all investor")
	}
	return rowsAff, nil
}

// Delete deletes a single Investor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Investor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no Investor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), investorPrimaryKeyMapping)
	sql := "DELETE FROM \"investors\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from investors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for investors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q investorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no investorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from investors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for investors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvestorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(investorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), investorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"investors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, investorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from investor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for investors")
	}

	if len(investorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Investor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvestor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvestorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvestorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), investorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"investors\".* FROM \"investors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, investorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in InvestorSlice")
	}

	*o = slice

	return nil
}

// InvestorExists checks if the Investor row exists.
func InvestorExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"investors\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if investors exists")
	}

	return exists, nil
}
