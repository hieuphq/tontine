// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GroupLogItem is an object representing the database table.
type GroupLogItem struct {
	ID         int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupLogID int64      `boil:"group_log_id" json:"group_log_id" toml:"group_log_id" yaml:"group_log_id"`
	Amount     float64    `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Currency   string     `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	InvestorID null.Int64 `boil:"investor_id" json:"investor_id,omitempty" toml:"investor_id" yaml:"investor_id,omitempty"`
	CreatedAt  time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *groupLogItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupLogItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupLogItemColumns = struct {
	ID         string
	GroupLogID string
	Amount     string
	Currency   string
	InvestorID string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	GroupLogID: "group_log_id",
	Amount:     "amount",
	Currency:   "currency",
	InvestorID: "investor_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GroupLogItemWhere = struct {
	ID         whereHelperint64
	GroupLogID whereHelperint64
	Amount     whereHelperfloat64
	Currency   whereHelperstring
	InvestorID whereHelpernull_Int64
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
}{
	ID:         whereHelperint64{field: "\"group_log_items\".\"id\""},
	GroupLogID: whereHelperint64{field: "\"group_log_items\".\"group_log_id\""},
	Amount:     whereHelperfloat64{field: "\"group_log_items\".\"amount\""},
	Currency:   whereHelperstring{field: "\"group_log_items\".\"currency\""},
	InvestorID: whereHelpernull_Int64{field: "\"group_log_items\".\"investor_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"group_log_items\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"group_log_items\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"group_log_items\".\"deleted_at\""},
}

// GroupLogItemRels is where relationship names are stored.
var GroupLogItemRels = struct {
	Investor string
	GroupLog string
}{
	Investor: "Investor",
	GroupLog: "GroupLog",
}

// groupLogItemR is where relationships are stored.
type groupLogItemR struct {
	Investor *Investor
	GroupLog *GroupLog
}

// NewStruct creates a new relationship struct
func (*groupLogItemR) NewStruct() *groupLogItemR {
	return &groupLogItemR{}
}

// groupLogItemL is where Load methods for each relationship are stored.
type groupLogItemL struct{}

var (
	groupLogItemAllColumns            = []string{"id", "group_log_id", "amount", "currency", "investor_id", "created_at", "updated_at", "deleted_at"}
	groupLogItemColumnsWithoutDefault = []string{"group_log_id", "currency", "investor_id", "deleted_at"}
	groupLogItemColumnsWithDefault    = []string{"id", "amount", "created_at", "updated_at"}
	groupLogItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// GroupLogItemSlice is an alias for a slice of pointers to GroupLogItem.
	// This should generally be used opposed to []GroupLogItem.
	GroupLogItemSlice []*GroupLogItem
	// GroupLogItemHook is the signature for custom GroupLogItem hook methods
	GroupLogItemHook func(context.Context, boil.ContextExecutor, *GroupLogItem) error

	groupLogItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupLogItemType                 = reflect.TypeOf(&GroupLogItem{})
	groupLogItemMapping              = queries.MakeStructMapping(groupLogItemType)
	groupLogItemPrimaryKeyMapping, _ = queries.BindMapping(groupLogItemType, groupLogItemMapping, groupLogItemPrimaryKeyColumns)
	groupLogItemInsertCacheMut       sync.RWMutex
	groupLogItemInsertCache          = make(map[string]insertCache)
	groupLogItemUpdateCacheMut       sync.RWMutex
	groupLogItemUpdateCache          = make(map[string]updateCache)
	groupLogItemUpsertCacheMut       sync.RWMutex
	groupLogItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupLogItemBeforeInsertHooks []GroupLogItemHook
var groupLogItemBeforeUpdateHooks []GroupLogItemHook
var groupLogItemBeforeDeleteHooks []GroupLogItemHook
var groupLogItemBeforeUpsertHooks []GroupLogItemHook

var groupLogItemAfterInsertHooks []GroupLogItemHook
var groupLogItemAfterSelectHooks []GroupLogItemHook
var groupLogItemAfterUpdateHooks []GroupLogItemHook
var groupLogItemAfterDeleteHooks []GroupLogItemHook
var groupLogItemAfterUpsertHooks []GroupLogItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupLogItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupLogItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupLogItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupLogItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupLogItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupLogItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupLogItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupLogItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupLogItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupLogItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupLogItemHook registers your hook function for all future operations.
func AddGroupLogItemHook(hookPoint boil.HookPoint, groupLogItemHook GroupLogItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		groupLogItemBeforeInsertHooks = append(groupLogItemBeforeInsertHooks, groupLogItemHook)
	case boil.BeforeUpdateHook:
		groupLogItemBeforeUpdateHooks = append(groupLogItemBeforeUpdateHooks, groupLogItemHook)
	case boil.BeforeDeleteHook:
		groupLogItemBeforeDeleteHooks = append(groupLogItemBeforeDeleteHooks, groupLogItemHook)
	case boil.BeforeUpsertHook:
		groupLogItemBeforeUpsertHooks = append(groupLogItemBeforeUpsertHooks, groupLogItemHook)
	case boil.AfterInsertHook:
		groupLogItemAfterInsertHooks = append(groupLogItemAfterInsertHooks, groupLogItemHook)
	case boil.AfterSelectHook:
		groupLogItemAfterSelectHooks = append(groupLogItemAfterSelectHooks, groupLogItemHook)
	case boil.AfterUpdateHook:
		groupLogItemAfterUpdateHooks = append(groupLogItemAfterUpdateHooks, groupLogItemHook)
	case boil.AfterDeleteHook:
		groupLogItemAfterDeleteHooks = append(groupLogItemAfterDeleteHooks, groupLogItemHook)
	case boil.AfterUpsertHook:
		groupLogItemAfterUpsertHooks = append(groupLogItemAfterUpsertHooks, groupLogItemHook)
	}
}

// One returns a single groupLogItem record from the query.
func (q groupLogItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupLogItem, error) {
	o := &GroupLogItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for group_log_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupLogItem records from the query.
func (q groupLogItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupLogItemSlice, error) {
	var o []*GroupLogItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to GroupLogItem slice")
	}

	if len(groupLogItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupLogItem records in the query.
func (q groupLogItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count group_log_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupLogItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if group_log_items exists")
	}

	return count > 0, nil
}

// Investor pointed to by the foreign key.
func (o *GroupLogItem) Investor(mods ...qm.QueryMod) investorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InvestorID),
	}

	queryMods = append(queryMods, mods...)

	query := Investors(queryMods...)
	queries.SetFrom(query.Query, "\"investors\"")

	return query
}

// GroupLog pointed to by the foreign key.
func (o *GroupLogItem) GroupLog(mods ...qm.QueryMod) groupLogQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GroupLogID),
	}

	queryMods = append(queryMods, mods...)

	query := GroupLogs(queryMods...)
	queries.SetFrom(query.Query, "\"group_logs\"")

	return query
}

// LoadInvestor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupLogItemL) LoadInvestor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupLogItem interface{}, mods queries.Applicator) error {
	var slice []*GroupLogItem
	var object *GroupLogItem

	if singular {
		object = maybeGroupLogItem.(*GroupLogItem)
	} else {
		slice = *maybeGroupLogItem.(*[]*GroupLogItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupLogItemR{}
		}
		if !queries.IsNil(object.InvestorID) {
			args = append(args, object.InvestorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupLogItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InvestorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InvestorID) {
				args = append(args, obj.InvestorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`investors`), qm.WhereIn(`investors.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Investor")
	}

	var resultSlice []*Investor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Investor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for investors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for investors")
	}

	if len(groupLogItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Investor = foreign
		if foreign.R == nil {
			foreign.R = &investorR{}
		}
		foreign.R.GroupLogItems = append(foreign.R.GroupLogItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InvestorID, foreign.ID) {
				local.R.Investor = foreign
				if foreign.R == nil {
					foreign.R = &investorR{}
				}
				foreign.R.GroupLogItems = append(foreign.R.GroupLogItems, local)
				break
			}
		}
	}

	return nil
}

// LoadGroupLog allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupLogItemL) LoadGroupLog(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupLogItem interface{}, mods queries.Applicator) error {
	var slice []*GroupLogItem
	var object *GroupLogItem

	if singular {
		object = maybeGroupLogItem.(*GroupLogItem)
	} else {
		slice = *maybeGroupLogItem.(*[]*GroupLogItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupLogItemR{}
		}
		args = append(args, object.GroupLogID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupLogItemR{}
			}

			for _, a := range args {
				if a == obj.GroupLogID {
					continue Outer
				}
			}

			args = append(args, obj.GroupLogID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`group_logs`), qm.WhereIn(`group_logs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GroupLog")
	}

	var resultSlice []*GroupLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GroupLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for group_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group_logs")
	}

	if len(groupLogItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GroupLog = foreign
		if foreign.R == nil {
			foreign.R = &groupLogR{}
		}
		foreign.R.GroupLogItems = append(foreign.R.GroupLogItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupLogID == foreign.ID {
				local.R.GroupLog = foreign
				if foreign.R == nil {
					foreign.R = &groupLogR{}
				}
				foreign.R.GroupLogItems = append(foreign.R.GroupLogItems, local)
				break
			}
		}
	}

	return nil
}

// SetInvestor of the groupLogItem to the related item.
// Sets o.R.Investor to related.
// Adds o to related.R.GroupLogItems.
func (o *GroupLogItem) SetInvestor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Investor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_log_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"investor_id"}),
		strmangle.WhereClause("\"", "\"", 0, groupLogItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InvestorID, related.ID)
	if o.R == nil {
		o.R = &groupLogItemR{
			Investor: related,
		}
	} else {
		o.R.Investor = related
	}

	if related.R == nil {
		related.R = &investorR{
			GroupLogItems: GroupLogItemSlice{o},
		}
	} else {
		related.R.GroupLogItems = append(related.R.GroupLogItems, o)
	}

	return nil
}

// RemoveInvestor relationship.
// Sets o.R.Investor to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *GroupLogItem) RemoveInvestor(ctx context.Context, exec boil.ContextExecutor, related *Investor) error {
	var err error

	queries.SetScanner(&o.InvestorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("investor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Investor = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GroupLogItems {
		if queries.Equal(o.InvestorID, ri.InvestorID) {
			continue
		}

		ln := len(related.R.GroupLogItems)
		if ln > 1 && i < ln-1 {
			related.R.GroupLogItems[i] = related.R.GroupLogItems[ln-1]
		}
		related.R.GroupLogItems = related.R.GroupLogItems[:ln-1]
		break
	}
	return nil
}

// SetGroupLog of the groupLogItem to the related item.
// Sets o.R.GroupLog to related.
// Adds o to related.R.GroupLogItems.
func (o *GroupLogItem) SetGroupLog(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GroupLog) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_log_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"group_log_id"}),
		strmangle.WhereClause("\"", "\"", 0, groupLogItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupLogID = related.ID
	if o.R == nil {
		o.R = &groupLogItemR{
			GroupLog: related,
		}
	} else {
		o.R.GroupLog = related
	}

	if related.R == nil {
		related.R = &groupLogR{
			GroupLogItems: GroupLogItemSlice{o},
		}
	} else {
		related.R.GroupLogItems = append(related.R.GroupLogItems, o)
	}

	return nil
}

// GroupLogItems retrieves all the records using an executor.
func GroupLogItems(mods ...qm.QueryMod) groupLogItemQuery {
	mods = append(mods, qm.From("\"group_log_items\""))
	return groupLogItemQuery{NewQuery(mods...)}
}

// FindGroupLogItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupLogItem(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*GroupLogItem, error) {
	groupLogItemObj := &GroupLogItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_log_items\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupLogItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from group_log_items")
	}

	return groupLogItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupLogItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no group_log_items provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupLogItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupLogItemInsertCacheMut.RLock()
	cache, cached := groupLogItemInsertCache[key]
	groupLogItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupLogItemAllColumns,
			groupLogItemColumnsWithDefault,
			groupLogItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupLogItemType, groupLogItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupLogItemType, groupLogItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_log_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_log_items\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"group_log_items\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, groupLogItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into group_log_items")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == groupLogItemMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for group_log_items")
	}

CacheNoHooks:
	if !cached {
		groupLogItemInsertCacheMut.Lock()
		groupLogItemInsertCache[key] = cache
		groupLogItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupLogItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupLogItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupLogItemUpdateCacheMut.RLock()
	cache, cached := groupLogItemUpdateCache[key]
	groupLogItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupLogItemAllColumns,
			groupLogItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update group_log_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_log_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, groupLogItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupLogItemType, groupLogItemMapping, append(wl, groupLogItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update group_log_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for group_log_items")
	}

	if !cached {
		groupLogItemUpdateCacheMut.Lock()
		groupLogItemUpdateCache[key] = cache
		groupLogItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupLogItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for group_log_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for group_log_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupLogItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupLogItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_log_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupLogItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in groupLogItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all groupLogItem")
	}
	return rowsAff, nil
}

// Delete deletes a single GroupLogItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupLogItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no GroupLogItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupLogItemPrimaryKeyMapping)
	sql := "DELETE FROM \"group_log_items\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from group_log_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for group_log_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupLogItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no groupLogItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from group_log_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for group_log_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupLogItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupLogItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupLogItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_log_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupLogItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from groupLogItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for group_log_items")
	}

	if len(groupLogItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupLogItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupLogItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupLogItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupLogItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupLogItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_log_items\".* FROM \"group_log_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupLogItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in GroupLogItemSlice")
	}

	*o = slice

	return nil
}

// GroupLogItemExists checks if the GroupLogItem row exists.
func GroupLogItemExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_log_items\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if group_log_items exists")
	}

	return exists, nil
}
